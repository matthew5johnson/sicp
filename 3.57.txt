3.57: How many additions are performed when we compute the nth fib number using the definition of fibs based on the add-streams procedure? Show that the number of additions would be exponentially greater if we had implemented (delay <exp>) simply as (lambda () <exp>), without using the optimization provided by the memo-proc procedure described in section 3.5.1

The benefit of using memoization is that calling any previously calculated value doesn't require a re-calculation, and simply involves pulling that value from memory. Each fib number requires a calculation just once, and after that is in memory via our memoization data structure. n fib numbers would need n calculations minus the first one since we're given the starting number. O(n)

Not using memoization, and instead implementing a delay/stream approach to calculating previous fib numbers in the sequence would mean that instead of simply doing a look-up for the last two fibs like memoization does, every number would have to be recalculated each time. This would result in O(x^n) complexity, the same as our recursive fib procedure did in ch. 1/2. The memoized version can be thought of as the iterative procedure from earlier in the book.

