Suppose that the balances in three accounts start out as $10, $20, and $30, and that multiple processes run, exchanging the balances in the accounts. Argue that if the processes are run sequentially, after any number of concurrent exchanges, the account balances should be $10, $20, and $30 in some order. Show how this condition can be violated if the exchanges are implemented using the first version of the account-exchange program in this section. On the other hand, argue that even with this exchange program, the sum of the balances in the accounts will be preserved. Show how this condition would be violated if we did not serialize the transactions on individual accounts.

If the processes are run sequentially, then the exchanger will move the difference in account funds from the higher balance to the lower balance, without any aberrant intervention during mid-balance-exchange processes. This would lead to account balances eventually remaining at 10, 20, and 30. The non-serialized exchanger is the first implementation in this section. Using it, the conservation condition mentioned in the previous sentence could be violated if multiple balance modifications are invoked simultaneously, since serialization is not present to protect balances while mid-procedure.

The key piece of information to understand is that, while the accounts themselves are serialized, the overall process (inter-accounts) is not serialized. This means that any transfer among accounts will be subjected to the same problems that a single non-serialized account would be. It's easy to imagine the whole process being equivalent to a single account with no serialization. 
