;;;;   3.23

(define (make-deque) 
   (let ((front-ptr '()) (rear-ptr '())) 
     (define (set-front-ptr! item) (set! front-ptr item)) 
     (define (set-rear-ptr! item) (set! rear-ptr item)) 
     (define (empty-queue?) (null? front-ptr))  
     (define (front-queue) 
       (if (empty-queue?) 
           (error "empty queue" queue) 
           (car front-ptr))) 
     (define (rear-insert-queue! item) 
       (let ((new-pair (cons item '()))) 
         (cond ((empty-queue?) 
                (set-front-ptr! new-pair) 
                (set-rear-ptr! new-pair)) 
               (else 
                (set-cdr! rear-ptr new-pair) 
                (set-rear-ptr! new-pair))) 
         front-ptr))
     (define (front-insert-queue! item) 
       (let ((new-pair (cons item '()))) 
         (cond ((empty-queue?) 
                (set-front-ptr! new-pair) 
                (set-rear-ptr! new-pair)) 
               (else 
                (set-car! front-ptr new-pair) 
                (set-front-ptr! new-pair))) 
         rear-ptr))  
     (define (front-delete-deque!) 
       (cond ((empty-queue?) 
              (error "empty queue" queue)) 
             (else 
              (set-front-ptr! (cdr front-ptr))))
     (define (rear-delete-deque!) 
       (cond ((empty-queue?) 
              (error "empty queue" queue)) 
             (else 
              (set-rear-ptr! (car rear-ptr)))) 
       front-ptr)  
     (define (dispatch m) 
       (cond ((eq? m 'empty-queue?) (empty-queue?)) 
             ((eq? m 'front-queue) (front-queue)) 
             ((eq? m 'rear-insert-queue!) (rear-insert-deque!))
	     ((eq? m 'front-insert-queue!) (front-insert-deque!)) 
             ((eq? m 'front-delete-queue!) (front-delete-deque!))
             ((eq? m 'rear-delete-queue!) (rear-delete-deque!)) 
             (else (error "Command not given - please specify")))) 
  
     dispatch))
